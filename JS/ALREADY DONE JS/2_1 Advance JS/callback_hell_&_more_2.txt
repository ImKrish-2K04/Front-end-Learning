we have learn about some callback and error handling related in previous lecture (i.e part-1 of this lecture...)...

now we are going towards something more...

---------------
pyramid of doom
---------------
       OR
---------------
Callback HellðŸ‘»
---------------

when we have callback inside callback, the code getting more difficult to read and manage...

----------------------------------------------------------------------------
function callback(err, result) {
    if (err !== null) {
        console.log(err);
    } 
    else {
        function callback(err, result) {
            if (err !== null) {
                console.log(err);
            } 
            else {
                function callback(err, result) {
                    if (err !== null) {
                        console.log(err);
                    }
                    else {
                        function callback(err, result) {
                            if (err !== null) {
                                console.log(err);
                            } 
                            else {
                                function callback(err, result) {
                                    if (err !== null) {
                                        console.log(err);
                                    } 
                                    else {
                                        console.log(result);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
----------------------------------------------------------------------------

the code above is not correct in any sense but it defines how the complexity is becomes when we have multiple callbacks and how hard it becomes to manage...

as calls becomes more nested, the code becomes more deeper and increasingly more difficult to manage, especially if we have real code instead of the dummy demo!!

this is called 'callback hell' or 'pyramid of doom'

the pyramid of these calls grows towards the right with every asyncronous actions, soon it is spirals out of control, so this way of coding isn't very good!

there is one solution of the pyramid of doom or the callback HellðŸ‘» is 'promises'


------------------------------------------------------------------------------------------------------------------------
TILL HERE ALL IS MINE AND THE INSTRUCTOR 'CODE WITH HARRY' 's understanding... now we are going to learn from 'CHAT-gpt'
------------------------------------------------------------------------------------------------------------------------

What is Callback Hell?
----------------------

    Callback hell occurs when you have multiple nested callbacks, creating deeply nested code that is hard to read and maintain. This happens often in asynchronous programming when one asynchronous function depends on the result of another, leading to multiple levels of nesting.

Why is it called the Pyramid of Doom?
-------------------------------------

    As more callbacks are added, the code structure looks like a pyramid or a staircase, because each new callback is indented further than the previous one. This makes the code difficult to read and understand.

Example of Callback Hell:
-------------------------

    Let's consider an example where we have to perform several asynchronous tasks in sequence:
        - Fetch user data from an API.
        - Fetch user posts based on the user data.
        - Fetch comments on those posts.

    Here's how this might look in a callback-heavy approach:
    --------------------------------------------------------

        ? Simulating asynchronous functions with setTimeout

        function getUser(userId, callback) {
          setTimeout(() => {
            console.log("Fetched user");
            callback(null, { userId: userId, name: "John Doe" });
          }, 1000);
        }

        function getPosts(userId, callback) {
          setTimeout(() => {
            console.log("Fetched posts for user", userId);
            callback(null, [{ postId: 1, content: "Hello world!" }]);
          }, 1000);
        }

        function getComments(postId, callback) {
          setTimeout(() => {
            console.log("Fetched comments for post", postId);
            callback(null, [{ commentId: 1, content: "Nice post!" }]);
          }, 1000);
        }

        ? Using nested callbacks leading to callback hell
        getUser(1, (err, user) => {
          if (err) {
            console.error("Error fetching user:", err);
          } else {
            getPosts(user.userId, (err, posts) => {
              if (err) {
                console.error("Error fetching posts:", err);
              } else {
                getComments(posts[0].postId, (err, comments) => {
                  if (err) {
                    console.error("Error fetching comments:", err);
                  } else {
                    console.log("Comments:", comments);
                  }
                });
              }
            });
          }
        });

Problems with Callback Hell:
----------------------------

    - Readability: The code becomes difficult to read and understand due to deep nesting.
    - Maintainability: Modifying such code is hard because you have to deal with multiple nested levels.
    - Error Handling: Managing errors across multiple levels of callbacks can be cumbersome.

Solutions to Avoid Callback Hell:
---------------------------------

    There are several ways to avoid callback hell and write cleaner asynchronous code:

        - Modularize Callbacks: Break down your callbacks into smaller, modular functions.
        - Promises: Use Promises to handle asynchronous operations.
        - Async/Await: Use async and await syntax for an even cleaner approach.

Example with Promises:
----------------------

    Promises can help flatten the pyramid by allowing you to chain asynchronous operations:

        ? Simulating asynchronous functions with Promises

        function getUser(userId) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              console.log("Fetched user");
              resolve({ userId: userId, name: "John Doe" });
            }, 1000);
          });
        }

        function getPosts(userId) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              console.log("Fetched posts for user", userId);
              resolve([{ postId: 1, content: "Hello world!" }]);
            }, 1000);
          });
        }

        function getComments(postId) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              console.log("Fetched comments for post", postId);
              resolve([{ commentId: 1, content: "Nice post!" }]);
            }, 1000);
          });
        }

        ? Chaining Promises to avoid callback hell
        getUser(1)
          .then(user => {
            return getPosts(user.userId);
          })
          .then(posts => {
            return getComments(posts[0].postId);
          })
          .then(comments => {
            console.log("Comments:", comments);
          })
          .catch(err => {
            console.error("Error:", err);
          });

Example with Async/Await:
-------------------------

    Async/await syntax makes the code look synchronous and more readable:

        async function fetchUserData() {
          try {
            const user = await getUser(1);
            const posts = await getPosts(user.userId);
            const comments = await getComments(posts[0].postId);
            console.log("Comments:", comments);
          } catch (err) {
            console.error("Error:", err);
          }
        }

        fetchUserData();

Conclusion:
-----------

    Callback hell occurs when you have deeply nested callbacks, making the code hard to read and maintain. Using Promises or async/await syntax can significantly improve the readability and maintainability of your asynchronous code. These modern approaches help you avoid the pitfalls of callback hell by flattening the pyramid structure and making your code cleaner and more manageable.