NOTE : THIS IS COMPLETELY COPIED FROM THE CHAT-GPT...
PLEASE UNDERSTAND IT AND THEN PRACTICE FOR IT BY GETTING SOME EXERCISES FROM CHAT-GPT ABOUT IT...
-------------------------------------------------------------------------------------------------


What is a Promise?
------------------

    A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. Promises provide a cleaner, more manageable way to handle asynchronous operations compared to traditional callbacks.

Key States of a Promise:
------------------------

    A Promise can be in one of three states:

        - Pending: The initial state. The operation is ongoing.
        - Fulfilled: The operation completed successfully, and the Promise has a resolved value.
        - Rejected: The operation failed, and the Promise has a reason for the failure (an error).

Creating a Promise:
-------------------

    A Promise is created using the Promise constructor, which takes a function (executor) with two arguments: resolve and reject.

        SYNTAX:
        -------

        const myPromise = new Promise((resolve, reject) => {
          // Simulate an asynchronous operation using setTimeout
          setTimeout(() => {
            const success = true; // Change this to false to simulate a failure
            if (success) {
              resolve("Operation completed successfully!");
            } else {
              reject(new Error("Operation failed!"));
            }
          }, 2000);
        });

        ACTUAL EXAMPLE:
        ---------------

        // Simulating an asynchronous operation with a Promise

        let myPromise = new Promise((resolve, reject) => {
          // Simulate a delay using setTimeout

          setTimeout(()=>{
            let success = true; // Change this to false to simulate failure
            if(success) {
              resolve("action is done successfully!"); // resolves with the success message
            }
            else {
              reject(new Error("action is failed!")); // rejects with an error
            }
          }, 2000); // Simulates a 2-second delay
        });

        // Using .then() for handling successful completion and .catch() for error handling

        myPromise.then((result) => {
          console.log(result); // Logs the resolved value (success message)
        });

        myPromise.catch((error) => {
          error.message; // logs the error on the console
        })

Using Promises:
---------------

    You use .then() to handle the fulfillment of a promise and .catch() to handle rejection.

        myPromise
          .then((result) => {
            console.log(result); // Logs "Operation completed successfully!"
          })
          .catch((error) => {
            console.error(error.message); // Logs "Operation failed!"
          });

Example: Using Promises to Fetch Data
-------------------------------------

    Let's rewrite the previous example of fetching user data, posts, and comments using Promises.
    
    Simulated Asynchronous Functions:
    ---------------------------------

        function getUser(userId) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              console.log("Fetched user");
              resolve({ userId: userId, name: "John Doe" });
            }, 1000);
          });
        }

        function getPosts(userId) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              console.log("Fetched posts for user", userId);
              resolve([{ postId: 1, content: "Hello world!" }]);
            }, 1000);
          });
        }

        function getComments(postId) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              console.log("Fetched comments for post", postId);
              resolve([{ commentId: 1, content: "Nice post!" }]);
            }, 1000);
          });
        }
    
    Chaining Promises:
    ------------------

        getUser(1)
          .then(user => {
            return getPosts(user.userId);
          })
          .then(posts => {
            return getComments(posts[0].postId);
          })
          .then(comments => {
            console.log("Comments:", comments);
          })
          .catch(err => {
            console.error("Error:", err.message);
          });

    Example with Async/Await:
    -------------------------

        Using async and await makes the code even cleaner and easier to understand:

            async function fetchUserData() {
              try {
                const user = await getUser(1);
                const posts = await getPosts(user.userId);
                const comments = await getComments(posts[0].postId);
                console.log("Comments:", comments);
              } catch (err) {
                console.error("Error:", err.message);
              }
            }

            fetchUserData();


Benefits of Using Promises:
---------------------------

    - Avoiding Callback Hell: Promises help avoid deeply nested callbacks, making the code more readable and maintainable.
    - Better Error Handling: Promises provide a centralized way to handle errors using .catch().
    - Composability: Promises can be chained and combined using methods like .all(), .race(), .allSettled(), and .any(), which can manage multiple asynchronous operations more effectively.

Example: Combining Multiple Promises:
-------------------------------------

    Here's an example of using Promise.all() to run multiple asynchronous operations in parallel and wait for all of them to complete:

        const promise1 = new Promise((resolve) => setTimeout(() => resolve("Result 1"), 1000));
        const promise2 = new Promise((resolve) => setTimeout(() => resolve("Result 2"), 2000));
        const promise3 = new Promise((resolve) => setTimeout(() => resolve("Result 3"), 3000));

        Promise.all([promise1, promise2, promise3])
          .then((results) => {
            console.log(results); // Logs ["Result 1", "Result 2", "Result 3"]
          })
          .catch((err) => {
            console.error("Error:", err.message);
          });
    
Conclusion:
-----------

    Promises in JavaScript provide a powerful and flexible way to handle asynchronous operations, making your code cleaner and easier to manage compared to traditional callbacks. By using .then(), .catch(), and async/await, you can write more readable and maintainable asynchronous code.